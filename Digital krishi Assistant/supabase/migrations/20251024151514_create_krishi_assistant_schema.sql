/*
  # Digital Krishi Assistant Database Schema

  ## Overview
  Complete database schema for the Digital Krishi Assistant system supporting
  farmer profiles, crop management, advisory systems, disease tracking, irrigation,
  market data, and AI-powered recommendations.

  ## New Tables

  ### 1. farmers
  - `id` (uuid, primary key) - Unique farmer identifier
  - `user_id` (uuid, references auth.users) - Authentication link
  - `full_name` (text) - Farmer's full name
  - `phone_number` (text) - Contact number
  - `location` (jsonb) - Geographic coordinates and address
  - `land_size` (decimal) - Farm size in acres
  - `soil_type` (text) - Type of soil
  - `language_preference` (text) - Preferred language (default: 'en')
  - `created_at` (timestamptz) - Account creation timestamp
  - `updated_at` (timestamptz) - Last update timestamp

  ### 2. crops
  - `id` (uuid, primary key) - Unique crop identifier
  - `farmer_id` (uuid, references farmers) - Owner farmer
  - `crop_name` (text) - Name of the crop
  - `crop_type` (text) - Category (cereal, vegetable, fruit, etc.)
  - `planting_date` (date) - When crop was planted
  - `expected_harvest_date` (date) - Projected harvest date
  - `current_stage` (text) - Growth stage
  - `health_status` (text) - Current health (healthy, at_risk, diseased)
  - `area` (decimal) - Area covered in acres
  - `created_at` (timestamptz) - Record creation timestamp

  ### 3. weather_data
  - `id` (uuid, primary key) - Unique weather record identifier
  - `location` (jsonb) - Geographic coordinates
  - `temperature` (decimal) - Temperature in Celsius
  - `humidity` (decimal) - Humidity percentage
  - `rainfall` (decimal) - Rainfall in mm
  - `wind_speed` (decimal) - Wind speed in km/h
  - `forecast_data` (jsonb) - 7-day forecast
  - `recorded_at` (timestamptz) - Data timestamp
  - `created_at` (timestamptz) - Record creation timestamp

  ### 4. advisories
  - `id` (uuid, primary key) - Unique advisory identifier
  - `farmer_id` (uuid, references farmers) - Target farmer
  - `crop_id` (uuid, references crops, optional) - Related crop
  - `advisory_type` (text) - Type (irrigation, fertilizer, pest_control, disease, market, general)
  - `title` (text) - Advisory title
  - `content` (text) - Detailed advisory content
  - `priority` (text) - Priority level (low, medium, high, critical)
  - `ai_generated` (boolean) - Whether generated by AI
  - `read` (boolean) - Read status
  - `created_at` (timestamptz) - Creation timestamp

  ### 5. disease_records
  - `id` (uuid, primary key) - Unique disease record identifier
  - `crop_id` (uuid, references crops) - Affected crop
  - `disease_name` (text) - Name of disease
  - `severity` (text) - Severity level
  - `detected_at` (timestamptz) - Detection timestamp
  - `image_url` (text, optional) - Image of affected crop
  - `ai_confidence` (decimal) - AI detection confidence score
  - `treatment_status` (text) - Treatment status
  - `notes` (text) - Additional notes
  - `created_at` (timestamptz) - Record creation timestamp

  ### 6. irrigation_schedules
  - `id` (uuid, primary key) - Unique schedule identifier
  - `crop_id` (uuid, references crops) - Related crop
  - `scheduled_date` (date) - Scheduled irrigation date
  - `water_amount` (decimal) - Water amount in liters
  - `soil_moisture_level` (decimal) - Current soil moisture percentage
  - `completed` (boolean) - Completion status
  - `notes` (text) - Additional notes
  - `created_at` (timestamptz) - Record creation timestamp

  ### 7. market_prices
  - `id` (uuid, primary key) - Unique price record identifier
  - `crop_name` (text) - Crop name
  - `region` (text) - Geographic region
  - `price_per_kg` (decimal) - Price per kilogram
  - `market_demand` (text) - Demand level (low, medium, high)
  - `trend` (text) - Price trend (rising, falling, stable)
  - `recorded_at` (timestamptz) - Price data timestamp
  - `created_at` (timestamptz) - Record creation timestamp

  ### 8. chat_history
  - `id` (uuid, primary key) - Unique chat message identifier
  - `farmer_id` (uuid, references farmers) - Farmer
  - `message` (text) - Message content
  - `is_farmer` (boolean) - Whether message is from farmer
  - `response` (text, optional) - AI response
  - `context` (jsonb, optional) - Additional context
  - `created_at` (timestamptz) - Message timestamp

  ### 9. notifications
  - `id` (uuid, primary key) - Unique notification identifier
  - `farmer_id` (uuid, references farmers) - Target farmer
  - `title` (text) - Notification title
  - `message` (text) - Notification content
  - `type` (text) - Type (weather, disease, irrigation, market, advisory)
  - `priority` (text) - Priority level
  - `read` (boolean) - Read status
  - `created_at` (timestamptz) - Creation timestamp

  ## Security
  - Enable RLS on all tables
  - Farmers can only access their own data
  - Authentication required for all operations
  - Weather and market data readable by all authenticated users
*/

-- Create farmers table
CREATE TABLE IF NOT EXISTS farmers (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name text NOT NULL,
  phone_number text,
  location jsonb,
  land_size decimal DEFAULT 0,
  soil_type text,
  language_preference text DEFAULT 'en',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create crops table
CREATE TABLE IF NOT EXISTS crops (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  farmer_id uuid REFERENCES farmers(id) ON DELETE CASCADE NOT NULL,
  crop_name text NOT NULL,
  crop_type text,
  planting_date date,
  expected_harvest_date date,
  current_stage text DEFAULT 'planted',
  health_status text DEFAULT 'healthy',
  area decimal DEFAULT 0,
  created_at timestamptz DEFAULT now()
);

-- Create weather_data table
CREATE TABLE IF NOT EXISTS weather_data (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  location jsonb NOT NULL,
  temperature decimal,
  humidity decimal,
  rainfall decimal,
  wind_speed decimal,
  forecast_data jsonb,
  recorded_at timestamptz DEFAULT now(),
  created_at timestamptz DEFAULT now()
);

-- Create advisories table
CREATE TABLE IF NOT EXISTS advisories (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  farmer_id uuid REFERENCES farmers(id) ON DELETE CASCADE NOT NULL,
  crop_id uuid REFERENCES crops(id) ON DELETE SET NULL,
  advisory_type text NOT NULL,
  title text NOT NULL,
  content text NOT NULL,
  priority text DEFAULT 'medium',
  ai_generated boolean DEFAULT false,
  read boolean DEFAULT false,
  created_at timestamptz DEFAULT now()
);

-- Create disease_records table
CREATE TABLE IF NOT EXISTS disease_records (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  crop_id uuid REFERENCES crops(id) ON DELETE CASCADE NOT NULL,
  disease_name text NOT NULL,
  severity text DEFAULT 'medium',
  detected_at timestamptz DEFAULT now(),
  image_url text,
  ai_confidence decimal,
  treatment_status text DEFAULT 'pending',
  notes text,
  created_at timestamptz DEFAULT now()
);

-- Create irrigation_schedules table
CREATE TABLE IF NOT EXISTS irrigation_schedules (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  crop_id uuid REFERENCES crops(id) ON DELETE CASCADE NOT NULL,
  scheduled_date date NOT NULL,
  water_amount decimal,
  soil_moisture_level decimal,
  completed boolean DEFAULT false,
  notes text,
  created_at timestamptz DEFAULT now()
);

-- Create market_prices table
CREATE TABLE IF NOT EXISTS market_prices (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  crop_name text NOT NULL,
  region text NOT NULL,
  price_per_kg decimal NOT NULL,
  market_demand text DEFAULT 'medium',
  trend text DEFAULT 'stable',
  recorded_at timestamptz DEFAULT now(),
  created_at timestamptz DEFAULT now()
);

-- Create chat_history table
CREATE TABLE IF NOT EXISTS chat_history (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  farmer_id uuid REFERENCES farmers(id) ON DELETE CASCADE NOT NULL,
  message text NOT NULL,
  is_farmer boolean DEFAULT true,
  response text,
  context jsonb,
  created_at timestamptz DEFAULT now()
);

-- Create notifications table
CREATE TABLE IF NOT EXISTS notifications (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  farmer_id uuid REFERENCES farmers(id) ON DELETE CASCADE NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  type text NOT NULL,
  priority text DEFAULT 'medium',
  read boolean DEFAULT false,
  created_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE farmers ENABLE ROW LEVEL SECURITY;
ALTER TABLE crops ENABLE ROW LEVEL SECURITY;
ALTER TABLE weather_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE advisories ENABLE ROW LEVEL SECURITY;
ALTER TABLE disease_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE irrigation_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE market_prices ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS Policies for farmers table
CREATE POLICY "Farmers can view own profile"
  ON farmers FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Farmers can insert own profile"
  ON farmers FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Farmers can update own profile"
  ON farmers FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- RLS Policies for crops table
CREATE POLICY "Farmers can view own crops"
  ON crops FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = crops.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can insert own crops"
  ON crops FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = crops.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can update own crops"
  ON crops FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = crops.farmer_id
      AND farmers.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = crops.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can delete own crops"
  ON crops FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = crops.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

-- RLS Policies for weather_data table (all authenticated users can read)
CREATE POLICY "Authenticated users can view weather data"
  ON weather_data FOR SELECT
  TO authenticated
  USING (true);

-- RLS Policies for advisories table
CREATE POLICY "Farmers can view own advisories"
  ON advisories FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = advisories.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can update own advisories"
  ON advisories FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = advisories.farmer_id
      AND farmers.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = advisories.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

-- RLS Policies for disease_records table
CREATE POLICY "Farmers can view own disease records"
  ON disease_records FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = disease_records.crop_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can insert own disease records"
  ON disease_records FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = disease_records.crop_id
      AND farmers.user_id = auth.uid()
    )
  );

-- RLS Policies for irrigation_schedules table
CREATE POLICY "Farmers can view own irrigation schedules"
  ON irrigation_schedules FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = irrigation_schedules.crop_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can insert own irrigation schedules"
  ON irrigation_schedules FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = irrigation_schedules.crop_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can update own irrigation schedules"
  ON irrigation_schedules FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = irrigation_schedules.crop_id
      AND farmers.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM crops
      JOIN farmers ON farmers.id = crops.farmer_id
      WHERE crops.id = irrigation_schedules.crop_id
      AND farmers.user_id = auth.uid()
    )
  );

-- RLS Policies for market_prices table (all authenticated users can read)
CREATE POLICY "Authenticated users can view market prices"
  ON market_prices FOR SELECT
  TO authenticated
  USING (true);

-- RLS Policies for chat_history table
CREATE POLICY "Farmers can view own chat history"
  ON chat_history FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = chat_history.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can insert own chat messages"
  ON chat_history FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = chat_history.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

-- RLS Policies for notifications table
CREATE POLICY "Farmers can view own notifications"
  ON notifications FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = notifications.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

CREATE POLICY "Farmers can update own notifications"
  ON notifications FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = notifications.farmer_id
      AND farmers.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM farmers
      WHERE farmers.id = notifications.farmer_id
      AND farmers.user_id = auth.uid()
    )
  );

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_farmers_user_id ON farmers(user_id);
CREATE INDEX IF NOT EXISTS idx_crops_farmer_id ON crops(farmer_id);
CREATE INDEX IF NOT EXISTS idx_advisories_farmer_id ON advisories(farmer_id);
CREATE INDEX IF NOT EXISTS idx_disease_records_crop_id ON disease_records(crop_id);
CREATE INDEX IF NOT EXISTS idx_irrigation_schedules_crop_id ON irrigation_schedules(crop_id);
CREATE INDEX IF NOT EXISTS idx_chat_history_farmer_id ON chat_history(farmer_id);
CREATE INDEX IF NOT EXISTS idx_notifications_farmer_id ON notifications(farmer_id);
CREATE INDEX IF NOT EXISTS idx_market_prices_crop_name ON market_prices(crop_name);
CREATE INDEX IF NOT EXISTS idx_weather_data_recorded_at ON weather_data(recorded_at);